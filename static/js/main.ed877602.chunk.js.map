{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.jsx","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","Text","setText","Fragment","style","backgroundColor","color","onChange","event","target","value","rows","toUpperCase","showAlert","toLowerCase","newText","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","Mode","setMode","_useState3","_useState4","setAlert","message","setTimeout","body","background","setInterval","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ed877602.chunk.js","sourcesContent":["import React from 'react'\r\n// import { NavLink } from 'react-router-dom';\r\nimport PropTypes from 'prop-types'\r\nexport default function Navbar(props) {\r\n  return (\r\n    <div>\r\n      <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <div className=\"container-fluid\">\r\n          {/* <a className=\"navbar-brand\" href=\"/\">{props.title}</a> */}\r\n          <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                {/* <NavLink className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</NavLink> */}\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                {/* <a className=\"nav-link active\" to=\"/about\">About</a> */}\r\n                <a className=\"nav-link active\" href=\"#\">About</a>\r\n              </li>\r\n            </ul>\r\n            \r\n              <div className={`form-check form-switch text-${props.mode}`}>\r\n              <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckChecked\" />\r\n                <label className={`form-check-label text-${props.mode==='light'?'dark' : 'light'}`} htmlFor=\"flexSwitchCheckChecked\" >{props.mode==='light'?'Enable Dark mode' : \"Enable Light mode\"}</label>\r\n              </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"Type the application name\"\r\n};","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [Text, setText] = useState(\" \")\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value)\r\n\r\n    }\r\n    const handleToUpper = () =>{\r\n        setText(Text.toUpperCase());\r\n        // props.showAlert('Converted to upper case','success')\r\n        props.showAlert('Converted to upper case','success')\r\n       \r\n        \r\n    }\r\n    const handleToLower = () =>{\r\n        setText(Text.toLowerCase());\r\n        props.showAlert('Converted to lower case','success')\r\n    }\r\n    const handleToClear = () =>{\r\n        setText(\" \");\r\n    }\r\n    const handleToCopy = () =>{\r\n        var newText=document.getElementById(\"myTextBox\");\r\n        newText.select();\r\n        navigator.clipboard.writeText(newText.value)\r\n    }\r\n    const handleRemoveExtraSpaces = () =>{\r\n       setText(Text.split(/ +/).join(' '));\r\n        \r\n\r\n        \r\n    }\r\n    return (\r\n        <>\r\n            <div className={`container mb-3 my-3`}>\r\n                <h2>Enter Text</h2>\r\n                <textarea className={`form-control`} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: 'black'}} id=\"myTextBox\" onChange={handleOnChange} rows={2} value={Text} />\r\n                <div className=\"container my-2\">                \r\n                    <button type=\"button\" className=\"btn btn-primary mx-1 \" onClick={handleToUpper}>convertToUpper</button>\r\n                    <button type=\"button\" className=\"btn btn-primary mx-1 \" onClick={handleToLower}>convertToLower</button>\r\n                    <button type=\"button\" className=\"btn btn-primary mx-1 \" onClick={handleToClear}>clearText</button>\r\n                    <button type=\"button\" className=\"btn btn-primary mx-1 \" onClick={handleToCopy}>copyText</button>\r\n                    <button type=\"button\" className=\"btn btn-primary mx-1 \" onClick={handleRemoveExtraSpaces}>RemoveExtraSpace</button>\r\n                </div>\r\n                <div className=\"container\">\r\n                    <p>Total words  {Text.split(\" \").length}</p>\r\n                    <p>Total Characters  {Text.length}</p>\r\n                    <h6>Preview</h6>\r\n                    <p>{Text}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize = (word) =>{\r\n        const lower = word.toLowerCase();\r\n       return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert && <div className=\"alert alert-success alert-dismissible fade show\" role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\nimport Alert from \"./components/Alert\";\n// import { BrowserRouter, Route, Routes } from \"react-router-dom\";\n// import About from \"./components/About\";\nfunction App() {\n  const [Mode, setMode] = useState(\"dark\");\n  const toggleMode = () => {\n    if (Mode === \"dark\") {\n      setMode(\"light\");\n      document.body.style.background = \"white\";\n      document.title = \"TextUtiils-DarkMode\";\n      setInterval(() => {\n        document.title = \"Textmanipulation\";\n      }, 2000);\n      setInterval(() => {\n        document.title = \"manipulation text\";\n      }, 1500);\n      showAlert(\"Light Mode has been enable\", \"Succes\");\n    } else {\n      setMode(\"dark\");\n      document.body.style.background = \"grey\";\n      showAlert(\"Dark Mode has been enable\", \"Succes\");\n    }\n  };\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  return (\n    <>\n      {/* <BrowserRouter> */}\n        <div>\n          <Navbar title=\"TextUtils\" mode={Mode} toggleMode={toggleMode} />\n          <Alert alert={alert} />\n        </div>\n        \n        {/* <Routes> */}\n          {/* <Route exact path=\"/about\" element={<About />} /> */}\n          {/* <Route path=\"/\" element={<TextForm showAlert={showAlert} title=\"this is textform\" />} /> */}\n          <TextForm showAlert={showAlert} title=\"this is textform\" /> \n        {/* </Routes> */}\n      {/* </BrowserRouter> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}